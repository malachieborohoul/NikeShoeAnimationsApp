import 'package:flutter/material.dart';
import 'package:nike_shoes/nike_shoes_store_app/nike_shoes.dart';

const buttonSizeWidth = 160.0;
const buttonSizeHeight = 60.0;
const buttonCircularSize = 60.0;
const finalImageSize = 30.0;
const imageSize = 120.0;

class NikeShoppingCart extends StatefulWidget {
  const NikeShoppingCart({super.key, required this.shoesItem});
  final NikeShoes shoesItem;

  @override
  State<NikeShoppingCart> createState() => _NikeShoppingCartState();
}

class _NikeShoppingCartState extends State<NikeShoppingCart>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation _animationResize;
  late Animation _animationMovementIn;
  late Animation _animationMovementOut;
  @override
  void initState() {
    _controller = AnimationController(
        vsync: this, duration: const Duration(milliseconds: 2000));

    _animationResize = Tween(begin: 1.0, end: 0.0).animate(CurvedAnimation(
      parent: _controller,
      curve: const Interval(
        0.0,
        0.3,
      ),
    ));

    _animationMovementIn = Tween(begin: 0.0, end: 1.0).animate(CurvedAnimation(
      parent: _controller,
      curve: const Interval(0.3, 0.6, curve: Curves.fastLinearToSlowEaseIn),
    ));

    _animationMovementOut =
        Tween<double>(begin: 0.0, end: 1.0).animate(CurvedAnimation(
      parent: _controller,
      curve: const Interval(0.5, 1.0, curve: Curves.elasticIn),
    ));

    _controller.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        Navigator.pop(context, true);
      }
    });
    super.initState();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;

    Widget buildPanel() {
      final currentImageSize =
          (imageSize * _animationResize.value).clamp(finalImageSize, imageSize);
      return TweenAnimationBuilder(
          duration: const Duration(milliseconds: 600),
          tween: Tween(begin: 1.0, end: 0.0),
          builder: (context, value, child) {
            return Transform.translate(
              offset: Offset(0, value * size.height * .6),
              child: child,
            );
          },
          child: Stack(
            children: [
              Container(
                height: (size.height * .6 * _animationResize.value)
                    .clamp(buttonCircularSize, size.height * .6),
                width: (size.width * _animationResize.value)
                    .clamp(buttonCircularSize, size.width),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.only(
                    topLeft: const Radius.circular(30),
                    topRight: const Radius.circular(30),
                    bottomLeft: _animationResize.value == 1
                        ? Radius.zero
                        : const Radius.circular(30),
                    bottomRight: _animationResize.value == 1
                        ? Radius.zero
                        : const Radius.circular(30),
                  ),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: Column(
                    mainAxisAlignment: _animationResize.value == 1
                        ? MainAxisAlignment.start
                        : MainAxisAlignment.center,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Image.asset(
                            widget.shoesItem.images.first,
                            height: currentImageSize,
                          ),
                          if (_animationResize.value == 1) ...[
                            Column(
                              children: [
                                Text(
                                  widget.shoesItem.model,
                                  style: const TextStyle(color: Colors.grey),
                                ),
                                Text(
                                  '\$${widget.shoesItem.currentPrice.toInt().toString()}',
                                  style: const TextStyle(
                                      color: Colors.black,
                                      fontSize: 20,
                                      fontWeight: FontWeight.bold),
                                )
                              ],
                            )
                          ]
                        ],
                      )
                    ],
                  ),
                ),
              )
            ],
          ));
    }

    return AnimatedBuilder(
        animation: _controller,
        builder: (context, child) {
          return Material(
            color: Colors.transparent,
            child: Stack(
              children: [
                Positioned.fill(
                    child: GestureDetector(
                  onTap: () {
                    Navigator.pop(context);
                  },
                  child: Container(
                    color: Colors.black45,
                  ),
                )),
                Positioned.fill(
                    child: Stack(
                  children: [
                    if (_animationMovementIn.value != 1)
                      Positioned(
                          top: size.height * .4 +
                              (_animationMovementIn.value * size.height * .472),
                          width: (size.width * _animationResize.value)
                              .clamp(buttonCircularSize, size.width),
                          left: size.width / 2 -
                              (size.width * _animationResize.value)
                                      .clamp(buttonCircularSize, size.width) /
                                  2,
                          child: buildPanel()),
                    Positioned(
                        bottom: 40.0 - (_animationMovementOut.value * 100),
                        left: (size.width / 2) -
                            (buttonSizeWidth * _animationResize.value).clamp(
                                    buttonCircularSize, buttonSizeWidth) /
                                2,
                        child: TweenAnimationBuilder(
                            duration: const Duration(milliseconds: 600),
                            tween: Tween(begin: 1.0, end: 0.0),
                            child: GestureDetector(
                              onTap: () {
                                _controller.forward();
                              },
                              child: Container(
                                width: (buttonSizeWidth *
                                        _animationResize.value)
                                    .clamp(buttonCircularSize, buttonSizeWidth),
                                height: (buttonSizeHeight *
                                        _animationResize.value)
                                    .clamp(
                                        buttonCircularSize, buttonSizeHeight),
                                decoration: const BoxDecoration(
                                    color: Colors.black,
                                    borderRadius: BorderRadius.all(
                                      Radius.circular(30),
                                    )),
                                child: Padding(
                                  padding: const EdgeInsets.all(12.0),
                                  child: Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      const Icon(
                                        Icons.shopping_cart,
                                        color: Colors.white,
                                      ),
                                      if (_animationResize.value == 1) ...[
                                        const SizedBox(
                                          width: 10,
                                        ),
                                        const Text(
                                          "ADD TO CART",
                                          style: TextStyle(color: Colors.white),
                                        )
                                      ],
                                    ],
                                  ),
                                ),
                              ),
                            ),
                            builder: (context, value, child) {
                              return Transform.translate(
                                offset: Offset(0, value * size.height * .6),
                                child: child,
                              );
                            }))
                  ],
                ))
              ],
            ),
          );
        });
  }
}
